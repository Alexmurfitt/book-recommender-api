# ‚úÖ book_recommender_api/tests/test_recommender.py

import pytest
from book_recommender_api.app.models import FullProfile, Preferences, Personality
from book_recommender_api.app.recommender import compute_score, match_personality, generate_explanation, score_book

# üìò Libro ficticio con coincidencias parciales reales
mock_book = {
    "title": "Test Book",
    "author": "Author A",
    "genres": ["Ciencia Ficci√≥n", "Distop√≠a"],
    "subgenres": ["Utop√≠a"],
    "themes": ["libertad", "control social"],
    "emotion_tags": ["angustia", "alerta"],
    "tone": "oscuro",
    "style": "directo",
    "age_range": "16+",
    "personality_match": ["Alta apertura", "Alta extraversi√≥n"],
    "year": 2000,
    "description": "Un libro de prueba."
}

# üß† Perfil ficticio con coincidencia emocional y tem√°tica
mock_profile = FullProfile(
    preferences=Preferences(
        genres=["Ciencia Ficci√≥n"],
        themes=["libertad", "futurismo"],
        tone="oscuro",
        style="directo",
        emotion_tags=["alerta", "curiosidad"],
        age_range="16+",
        language="es"
    ),
    personality=Personality(O=75, C=55, E=80, A=50, N=30)
)

# üîª Perfil sin coincidencias (para detectar falsos positivos)
profile_sin_match = FullProfile(
    preferences=Preferences(
        genres=["Rom√°ntica"],
        themes=["amistad"],
        tone="luminoso",
        style="po√©tico",
        emotion_tags=["alegr√≠a"],
        age_range="infantil",
        language="es"
    ),
    personality=Personality(O=30, C=30, E=30, A=30, N=30)
)

# üîπ Test 1: compute_score
def test_compute_score():
    score = compute_score(mock_profile, mock_book)
    assert isinstance(score, float), "La puntuaci√≥n debe ser un n√∫mero decimal"
    assert 0 <= score <= 1, "La puntuaci√≥n debe estar entre 0 y 1"
    assert score > 0.3, "Debe reflejar coincidencia parcial significativa"

# üîπ Test 2: match_personality
def test_match_personality():
    tags = ["Alta apertura", "Alta extraversi√≥n", "Alta amabilidad"]
    result = match_personality(mock_profile.personality, tags)
    assert 0 < result <= 1, "Debe haber coincidencias de personalidad"
    assert round(result, 2) == round(2 / 3, 2), "Coincidencias esperadas: 2 de 3"

# üîπ Test 3: generate_explanation
def test_generate_explanation():
    explanation = generate_explanation(mock_book, mock_profile)
    assert isinstance(explanation, str)
    assert "g√©neros favoritos" in explanation
    assert "temas" in explanation
    assert "emociones" in explanation
    assert "tono narrativo" in explanation
    assert "estilo literario" in explanation
    assert "()" not in explanation, "No debe haber par√©ntesis vac√≠os"

# üîπ Test 4: score_book
def test_score_book():
    score = score_book(mock_book, mock_profile)
    expected_score = compute_score(mock_profile, mock_book)
    assert abs(score - expected_score) < 1e-6, "score_book debe coincidir con compute_score"

# üîπ Test 5: perfil sin coincidencias ‚Äî score bajo
def test_score_no_match():
    score = compute_score(profile_sin_match, mock_book)
    assert score < 0.1, "Puntuaci√≥n debe ser baja con perfil no relacionado"

# üîπ Test 6: explicaci√≥n vac√≠a debe evitarse incluso con perfil sin match
def test_generate_explanation_no_match():
    explanation = generate_explanation(mock_book, profile_sin_match)
    assert isinstance(explanation, str)
    assert "()" not in explanation, "La explicaci√≥n no debe tener campos vac√≠os aunque no haya coincidencias"
